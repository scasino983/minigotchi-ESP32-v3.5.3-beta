// Fixed version of Frame::send() that properly handles WiFi mode transitions
// and prevents crashes when switching between monitor mode and AP mode

/**
 * Sends a frame packet
 * @returns bool indicating success or failure
 */
bool Frame::send() {
  // Save current WiFi state before changing it
  wifi_mode_t previousMode;
  esp_wifi_get_mode(&previousMode);
  bool wasPromiscuous = false;
  esp_wifi_get_promiscuous(&wasPromiscuous);
  
  // If we were in promiscuous mode, turn it off properly
  if (wasPromiscuous) {
    esp_wifi_set_promiscuous(false);
    delay(20);  // Give WiFi state time to settle
  }
  
  // Set to AP mode for frame transmission
  esp_err_t mode_err = esp_wifi_set_mode(WIFI_MODE_AP);
  if (mode_err != ESP_OK) {
    Serial.printf("Failed to set WiFi mode to AP: %s\n", esp_err_to_name(mode_err));
    // Try to restore previous state
    if (wasPromiscuous) {
      esp_wifi_set_mode(previousMode);
      esp_wifi_set_promiscuous(true);
    }
    return false;
  }
  
  delay(20);  // Give WiFi time to settle into AP mode

  // create normal frame
  uint8_t *frame = Frame::pack();
  size_t frameSize = Frame::pwngridHeaderLength + Frame::essidLength +
                     Frame::headerLength;

  // Send frames
  esp_err_t err = ESP_FAIL;
  
  // Only try to send if we have valid memory
  if (frame != nullptr) {
    delay(20); // A small delay before transmission
    err = esp_wifi_80211_tx(WIFI_IF_AP, frame, frameSize, false);
    
    if (err == ESP_OK) {
      delete[] frame;
      frame = nullptr;  // Prevent use-after-free

      // Try to send the modified frame
      frame = Frame::packModified();
      
      if (frame != nullptr) {
        frameSize = Frame::pwngridHeaderLength + Frame::essidLength + Frame::headerLength;
        delay(20);  // Small delay between transmissions
        err = esp_wifi_80211_tx(WIFI_IF_AP, frame, frameSize, false);
        delete[] frame;
        frame = nullptr;  // Prevent use-after-free
      } else {
        err = ESP_FAIL;  // Memory allocation failed
      }
    } else {
      delete[] frame;  // Clean up on error
      frame = nullptr;
    }
  }

  // Restore previous WiFi state
  delay(20);  // Give WiFi time to finish transmission
  esp_wifi_set_mode(previousMode);
  
  if (wasPromiscuous) {
    delay(20);  // Give WiFi time to change mode
    esp_wifi_set_promiscuous(true);
  }

  return (err == ESP_OK);
}

/**
 * Improved version of Frame::advertise() that better handles WiFi state transitions
 * and prevents crashes by limiting the number of frames sent based on available memory
 */
void Frame::advertise() {
  int packets = 0;
  unsigned long startTime = millis();

  if (!Config::advertise) {
    return;  // Skip advertisement if disabled
  }

  // Stop the sniffer temporarily if it's running
  bool sniffer_was_running = is_sniffer_running();
  if (sniffer_was_running) {
    wifi_sniffer_stop();
    delay(100);  // Give time for the sniffer to stop properly
  }

  Serial.println(mood.getIntense() + " Starting advertisement...");
  Display::updateDisplay(mood.getIntense(), "Starting advertisement...");
  Parasite::sendAdvertising();
  delay(Config::shortDelay);
  
  // Check available heap memory
  int availableHeap = ESP.getFreeHeap();
  int maxPackets = min(50, availableHeap / 8192);  // Limit based on available memory
  maxPackets = max(5, maxPackets);  // At least send 5 packets
  
  Serial.printf("%s Available heap: %d bytes, sending max %d packets\n", 
               mood.getNeutral().c_str(), availableHeap, maxPackets);

  // Send a more reasonable number of packets with proper error handling
  for (int i = 0; i < maxPackets; ++i) {
    // Check if we're running low on memory
    if (ESP.getFreeHeap() < 10000) {
      Serial.println(mood.getBroken() + " Low memory, stopping advertisement");
      break;
    }
    
    if (Frame::send()) {
      packets++;

      // calculate packets per second
      float pps = packets / (float)(millis() - startTime) * 1000;

      // show pps
      if (!isinf(pps)) {
        Serial.printf("%s Packets: %d, Rate: %.1f pkt/s (Channel: %d)\n", 
                     mood.getIntense().c_str(), packets, pps, Channel::getChannel());
        
        Display::updateDisplay(
            mood.getIntense(),
            "Pkt: " + String(packets) + " @ " + String(pps, 1) + " pkt/s" +
                " (CH: " + String(Channel::getChannel()) + ")");
      }
      
      // Add a small delay between packets to avoid overloading the WiFi stack
      delay(50);
    } else {
      Serial.println(mood.getBroken() + " Advertisement failed to send!");
      Display::updateDisplay(mood.getBroken(), "Advertisement failed to send!");
      delay(100);  // Longer delay after a failure
    }
  }

  Serial.println(mood.getHappy() + " Advertisement finished!");
  Display::updateDisplay(mood.getHappy(), "Advertisement finished!");
  delay(Config::shortDelay);
  
  // Restart the sniffer if it was running before
  if (sniffer_was_running) {
    delay(100);  // Give WiFi time to settle
    wifi_sniffer_start();
  }
}
